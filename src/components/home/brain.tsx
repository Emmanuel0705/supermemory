/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/brain.glb 
*/

import React, { useLayoutEffect, useRef } from "react";
import { useGLTF, useScroll } from "@react-three/drei";
import * as THREE from "three";
import gsap from "gsap";
import { useFrame } from "@react-three/fiber";
import { log } from "console";

export function BrainModel(props: any) {
  const { nodes } = useGLTF("/models/brain.glb");
  const brainRef = useRef<THREE.Group | null>(null);

  const timelineRef = useRef<gsap.core.Timeline | null>(null);

  const scroll = useScroll();
  useFrame((state, delta) => {
    if (brainRef.current) {
      brainRef.current.rotation.y += delta; // Adjust speed by changing the multiplier
    }
    timelineRef.current?.seek(scroll.offset * timelineRef.current?.duration());
  });
  useLayoutEffect(() => {
    timelineRef.current = gsap.timeline();

    timelineRef.current.to(
      brainRef.current?.position as any,
      {
        duration: 1,
        x: 3.5,
        y: 1.5,
        z: 0,
      },
      0
    );

    timelineRef.current.to(
      brainRef.current?.rotation as any,
      { duration: 3, x: 0, y: -Math.PI / 6, z: 0 },
      0
    );
    timelineRef.current.to(
      brainRef.current?.scale as any,
      { duration: 1, x: 0.42, y: 0.42, z: 0.42 },
      0
    );
    timelineRef.current.to(
      brainRef.current?.position as any,
      {
        duration: 0.7,
        y: 4,
        z: 0,
      },
      1
    );
    timelineRef.current.to(
      brainRef.current?.scale as any,
      {
        duration: 1,
        x: 6.7,
        y: 6.7,
        z: 6.7,
      },
      1.7
    );
    timelineRef.current.to(
      brainRef.current?.position as any,
      {
        duration: 1,
        y: 40.5,
        x: -3,
      },
      1.7
    );
    timelineRef.current.from(
      (nodes.freesurff3 as THREE.Mesh).material as any,
      {
        duration: 1,
        opacity: 0,
      },
      1.7
    );
    timelineRef.current.to(
      (nodes.freesurff3 as THREE.Mesh).material as any,
      {
        duration: 1,
        opacity: 0,
      },
      1.7
    );
  }, []);

  return (
    <group
      ref={brainRef}
      {...props}
      dispose={null}
      // rotation={[0, -Math.PI / 3, 0]}
    >
      <mesh
        geometry={(nodes.freesurff3 as THREE.Mesh).geometry}
        material={(nodes.freesurff3 as THREE.Mesh).material}
        // position={[0, 0.2, -2]}
        position={[0, -6.2, -2]}
        scale={1.5}
        // rotation={[1.5, 0.1, -1.5]}
        rotation={[1.5, -0.04, 0.18]}
      />
    </group>
  );
}

useGLTF.preload("/models/brain.glb");
